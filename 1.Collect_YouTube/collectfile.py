import numpy as np 
import pandas as pd

# manage file
import json
import os
import glob
import shutil

# save video from youtube
import pytube 
from youtube_transcript_api import YouTubeTranscriptApi #script from youtube
from moviepy.video.io.ffmpeg_tools import ffmpeg_extract_subclip # cut subclip from youtube
import imageio_ffmpeg
import subprocess as sp


def collect_metadata(floder,id_video, channel):
  """colect data to matadata to data frame
  floder : path of relation
  id_video : video id of YouTube
  channel : YouTube channel """
  person = np.nan
  relation = f"{floder}/Relation.csv"
  df = pd.read_csv(relation)
  if id_video in df["id"].to_list():
    print("This id has ever collect before")
    return False
  else:
    row = len(df)
    df = pd.read_csv(relation)
    df.loc[row, "index"] = row
    df.loc[row, "id"] = id_video
    df.loc[row, "person"] = person
    df.loc[row, "channel"] = channel
    df.to_csv(f"{floder}/Relation.csv", index=False)
  return str(row +1)

def transcript(id_video):
  """load transcript Youtube video
  id_video : id video of Youtube"""
  transcript_list = YouTubeTranscriptApi.list_transcripts(id_video)
  for transcript in transcript_list:
    language = transcript.language_code, # language
    generated = transcript.is_generated # generated by YouTube
  if generated == False and language[0] == 'th':
    srt = YouTubeTranscriptApi.get_transcript(id_video,
                                            languages=['th'])
    for script in srt:
        end = script['start']+script['duration']
        script['end'] = end
  else:
    raise TypeError("This video not thai language or it is generated by youtube")
  return srt

def save_file_youtube(id_video ,savefile, filename):
  """save youtube file to drive
  id_video : YouTube ID Video
  savefile : path for save file
  filename : filename"""
  link = f"https://www.youtube.com/watch?v={id_video}"
  yt = pytube.YouTube(link)
  stream = yt.streams.get_highest_resolution()
  stream.download(output_path = savefile, filename= f"{filename}.mp4")

def script_video(folder, srt, raw_video):
  """script video youtube following by transcribe
  folder : floder name in script
  srt : filename
  raw_video : YouTube video full"""
  # shutil.rmtree(folder) #สร้าง if else ในกรณีที่ไม่มี file
  os.mkdir(folder)
  os.mkdir(f"{folder}/video")
  num = 0
  error = []
  for script in srt:
    text = script['text'].replace(" ", "")
    text = script['text'].replace("\n", "")
    try:
      # ffmpeg_path = imageio_ffmpeg.get_ffmpeg_exe()
      # sp.run([ffmpeg_path, '-ss', script["start"], '-to', script["end"], '-i', raw_video, 
      #  f"{folder}/video/{num}-{text}.mp4", '-y'], stderr=sp.NULL, stdout=sp.NULL)
      ffmpeg_extract_subclip(raw_video, script["start"], script["end"], targetname=f"{folder}/video/{num}-{text}.mp4")
      num +=1
    except:
        print(f"{num}-{text}.mp4")
        error.append(f"{num}-{text}.mp4")
  return error